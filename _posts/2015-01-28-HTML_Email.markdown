---

layout: post
title: "HTML Email organisation"
date: 2015-01-28
logo: false
permalink: html-email
tags: assemble
      html email
      grunt

---

I recently started sending a lot of HTML emails and it quickly got disorganized, developing and designing emails on demand is fine when sending a few emails but it gets messy when the volume of emails increase. Creating HTML emails is a fairly laborious undertaking, this got me thinking of methods of automating the various tasks involved which in my process included:
(*Vague list. Will get into this later...*)

1.	Finding an appropriate email template or framework. (There are a number of email templates and frameworks available exhaustive list [here](http://responsiveemailresources.com/) and [here](http://rodriguezcommaj.com/resources)).
2.	Design the emails, inline them (Premailer), Test (Usually just used physical devices but for a wider email client testing I recommend paid alternatives).

My adopted front-end workflow is fairly straight forward, the tools:

* [Assemble](http://assemble.io/) - generate static files.
* [Grunt](http://gruntjs.com/) - automate various tasks.
* [Premailer](http://premailer.dialect.ca/) - inline css styles.
* [Sass](http://sass-lang.com/) - Syntatically Awesome Stylesheets (Totally optional but highly recommended)
* [Github](http://github.com) - code hosting.


Personally I use a Linux machine so the setup instructions might not be applicable for windows users.

## Setup

#### 1. Grunt

Grunt is a javascript task runner that automates repetitive tasks. For this article I'm assuming you are already familiar with it, if not please got through their [Getting Started](http://gruntjs.com/getting-started) tutorial. I will however install grunt through a package.json file later.

Install grunt-cli

```bash
npm install -g grunt-cli
```

Requirements for grunt is [NodeJs](http://nodejs.org), and an up-to-date npm installation.

#### 2. Assemble

Assemble is a static generator for Node.js, Grunt.js and Yeoman, it's fairly simple to use and an awesome tool. I'm going to use grunt to install it.

#### 3. Premailer

This is for inlining css styles, we will achieve this using the premailer gem and use the grunt-premailer plugin to automate this task.

Install it;

```bash
gem install premailer hpricot nokogiri
```

#### 4. Sass

I always use sass to style my projects instead of plain CSS, if you haven't used sass before atleast I bet you've heard of it. [Read more - sass](http://sass-lang.com)

Install sass;

```bash
gem install sass
```
## Lets do this!

Clone the repo to your machine to get started.

```bash
git clone https://github.com/hs-develop-design/html_email.git
```

Run <code class="post-code">npm install</code> at the root of the directory to install the various plugins used.

For the project I'm going to use some grunt plugins for various tasks. The final <code class="post-code">Gruntfile.js</code> and <code class="post-code">package.json</code> will be found in the repo.

Plugins used;

* <code class="post-code">grunt-newer</code> skip already processed files.
* <code class="post-code">grunt-contrib-connect</code> static web server.
* <code class="post-code">grunt-contrib-watch</code> to watch for changes and run site rebuild.
* <code class="post-code">grunt-premailer</code> task to inline styles to the final email generated by assemble using the premailer gem installed earlier. (please stick to v0.2.5, had problems with later versions!!!)
* <code class="post-code">grunt-contrib-imagemin</code> to minify image assets.
* <code class='post-code'>grunt-contrib-clean</code> to clean up directories before build tasks.
* <code class="posy-code">grunt-contrib-sass</code> to process sass stylesheets.
* <code class="post-code">grunt-cdnify</code> to prepend url with absolute paths for external assets like images.
* (Optional) <code class="post-code">grunt-aws</code> to upload my image assets to Amazon S3 - Personal preference.
* (Optional) <code class="post-code">grunt-mailgun</code> to send the emails.

To build and view the emails (intergrated livereload so changes are real time) run <code class="post-code">grunt dev</code> then point your browser to <code class="post-code">http://localhost:8080</code> to view the generated emails. <strong>Note I have only 1 working example the transactional.html template.</strong>

To publish assets (images for this example) run <code class="post-code">grunt cdnifyd</code>. This will upload images to Amazon S3 and append image urls to point to your bucket.

To send the mail using mailgun there are 3 options - the template (e.g. transactional.html or .txt), the sender email address, the recipient email address and the subject. Example;

```bash
grunt send --template=transactional.html --sender=jane@doe.com --recipient=john@doe.com --subject="This is a subject"
```

The final repo is [here](https://github.com/hs-develop-design/html_email).
